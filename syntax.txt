tagged-type ::= identifier':' type

type ::= tuple-type
       | enumerated-type
       | union-type
       | array-type
       | function-type
       | tagged-type
       | packed-type
       | pointer-type

pointer-type ::= '@' type

packed-type ::= type '...'

enumerated-type ::= type '|' type

union-type ::= type '+' type

array-type ::= type '*' unsigned-integral-constant

tuple-type ::= type [',' type]

function-type ::= tuple-type '-' type

initializer ::= '{' expression* '}'

type IdentifierToken = String;

type TokenType = Identifier: IdentifierToken -> 0
               | LeftCurl -> '{'
               | RightCurl -> '}'
               | Function: (() -> ()) -> 1;

type Function<...Args, ReturnType>
    = (Args...) -> ReturnType;

trait FunctionType<...InputTypes, ReturnType> {
    type Input = 'InputTypes...;
    type Return = 'ReturnType;

    trait evaluate: (Input...) -> Return;
}

type ParsingContext =
    prior_type: TupleType
              | ArrayType,
    from: (TupleType: (numer: ));


trait ExpressionType<TypeType> {
    type Type = 'TypeType;

    parse: (context: @ParsingContext) -> @Type;
}

module memory;


type Location = line: u64, column: u64; 

type Token = \type: TokenType, location: Location;

let my_function: (fn: (int) -> bool) -> int;

let my_value: int;
